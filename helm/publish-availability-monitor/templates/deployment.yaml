apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ .Values.service.name }}
  labels:
    chart: "{{ .Chart.Name | trunc 63 }}"
    chartVersion: "{{ .Chart.Version | trunc 63 }}"
    app: {{ .Values.service.name }}
    visualize: "true"
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.service.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.service.name }}
        visualize: "true"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - {{ .Values.service.name }}
            topologyKey: "kubernetes.io/hostname"
      containers:
      - name: {{ .Values.service.name }}
        image: "{{ .Values.image.repository }}:{{ .Chart.Version }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        resources:
{{ toYaml .Values.resources | indent 12 }}
        env:
        - name: KAFKA_TOPIC
          value: "{{ .Values.envs.kafka_topic }}"
        - name: KAFKA_PROXY_HOST
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: kafka-msk.proxy.url
        - name: QUEUE_ADDR
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: kafka-msk.proxy.url.with.protocol
        - name: CONTENT_URL
          value: "{{ .Values.envs.content_url }}"
        - name: CONTENT_NEO4J_URL
          value: "{{ .Values.envs.content_neo4j_url }}"
        - name: COMPLEMENTARY_CONTENT_URL
          value: "{{ .Values.envs.complementary_content_url }}"
        - name: ETCD_PEERS
          value: "NOT_AVAILABLE"
        - name: INTERNAL_COMPONENTS_URL
          value: "{{ .Values.envs.internal_components_url }}"
        - name: LISTS_URL
          value: "{{ .Values.envs.lists_url }}"
        - name: NOTIFICATIONS_URL
          value: "{{ .Values.envs.notifications_url }}"
        - name: NOTIFICATIONS_PUSH_URL
          value: {{ .Values.envs.notifications_push_url }}\&{{ .Values.envs.notifications_push_url_param2 }}
        - name: LISTS_NOTIFICATIONS_URL
          value: "{{ .Values.envs.lists_notifications_url }}"
        - name: LISTS_NOTIFICATIONS_PUSH_URL
          value: "{{ .Values.envs.lists_notifications_push_url }}"
        - name: LISTS_NOTIFICATIONS_PUSH_API_KEY
          valueFrom:
            secretKeyRef:
              name: publish-availability-monitor-secrets
              key: list_notifications_push.api_key
        - name: NOTIFICATIONS_PUSH_API_KEY
          valueFrom:
            secretKeyRef:
              name: publish-availability-monitor-secrets
              key: notifications_push.api_key
        {{- $base_url := default .Values.cluster.delivery.url .Values.envs.validation_endpoints.base_url }}
        - name: METHODE_ARTICLE_VALIDATION_URL
          value: "{{ $base_url }}/{{ .Values.envs.validation_endpoints.methode_article_mapper }}"
        - name: METHODE_CONTENT_PLACEHOLDER_MAPPER_URL
          value: "{{ $base_url }}/{{ .Values.envs.validation_endpoints.methode_content_placeholder_mapper }}"
        - name: METHODE_IMAGE_MODEL_MAPPER_URL
          value: "{{ $base_url }}/{{ .Values.envs.validation_endpoints.methode_image_model_mapper }}"
        - name: METHODE_LIST_VALIDATION_URL
          value: "{{ $base_url }}/{{ .Values.envs.validation_endpoints.methode_list_mapper }}"
        - name: METHODE_ARTICLE_INTERNAL_COMPONENTS_MAPPER_URL
          value: "{{ $base_url }}/{{ .Values.envs.validation_endpoints.methode_article_internal_components_mapper }}"
        - name: VIDEO_MAPPER_URL
          value: "{{ $base_url }}/{{ .Values.envs.validation_endpoints.video_mapper }}"
        - name: WORDPRESS_MAPPER_URL
          value: "{{ $base_url }}/{{ .Values.envs.validation_endpoints.wordpress_mapper }}"
        - name: UUID_RESOLVER_URL
          value: "{{ .Values.envs.uuid_resolver_url }}"
        ports:
        - containerPort: 8080
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 30
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 30
        volumeMounts:
        - name: read-envs-config
          mountPath: {{ .Values.volumes.read_envs_config_mount_path }}
        - name: pam-secrets
          mountPath: {{ .Values.volumes.secrets_mount_path }}
      volumes:
      - name: pam-secrets
        secret:
          secretName: publish-availability-monitor-secrets
          items:
          - key: read-credentials
            path: {{ .Values.volumes.read_env_credentials_file_name }}
          - key: validator-credentials
            path: {{ .Values.volumes.validation_credentials_file_name }}
      - name: read-envs-config
        configMap:
          name: global-config
          items:
          - key: pam.read.environments
            path: {{ .Values.volumes.read_envs_config_file_name }}

# corresponding secret template
# kind: Secret
# apiVersion: v1
# metadata:
#   name: publish-availability-monitor-secrets
#   namespace: default
# data:
#   read-credentials:
# [
#   {
#     "env-name": "k8s",
#     "username": "foo",
#     "password": "bar"
#   }
# ]
#
#   validator-credentials:
# {
#   "username": "oof",
#   "password": "baz"
# }
#
#  list_notifications_push.api_key: fooBar
#  notifications_push.api_key: foobaz
